---
alwaysApply: true
---

# AI-Powered-ToDo-List Project Rules

## 项目概述
这是一个基于 AI 的智能待办事项管理系统，包含 React 前端和 FastAPI 后端，支持任务管理、日程安排、用户管理和 AI 助手功能。

## 技术栈
- **前端**: React 18 + TypeScript + Vite + Ant Design + Day.js + assistant ui
- **后端**: FastAPI + Python 3.11 + SQLAlchemy + PostgreSQL
- **AI**: LangGraph + OpenAI API
- **数据库**: PostgreSQL + Docker
- **认证**: JWT Token

## 代码规范

### 通用规范
- 使用 TypeScript 严格模式
- 遵循 ESLint 和 Prettier 配置
- 使用有意义的变量和函数命名
- 添加适当的注释和文档字符串
- 保持代码简洁和可读性

### 前端规范
- 使用函数式组件和 React Hooks
- 组件文件使用 PascalCase 命名
- 使用 TypeScript 接口定义 props 和状态
- 使用 Ant Design 组件库保持 UI 一致性
- 状态管理使用 useState 和 useEffect
- API 调用使用 async/await 模式

### 后端规范
- 使用 FastAPI 的依赖注入系统
- 数据库操作使用 SQLAlchemy ORM
- 使用 Pydantic 模型进行数据验证
- 异步函数使用 async/await
- 错误处理使用 HTTPException
- 数据库会话使用依赖注入

### 数据库规范
- 表名使用 snake_case
- 字段名使用 snake_case
- 主键使用 id 字段
- 时间戳字段使用 created_at 和 updated_at
- 外键字段使用 _id 后缀
- 添加适当的索引提高查询性能


### cursor
- 生成的文档请放入cursordoc目录
- 生成的测试脚本请放入cursortest目录

### assistant ui 集成
- 请参考项目： /home/song/workspace/me/assistant_ui/assistant-ui-langgraph-fastapi/
- 请保证跟参考项目的版本保持一致，对于assistant ui这个库


## 项目结构

### 前端结构
```
frontend/src/
├── components/          # React 组件
├── services/           # API 服务
├── types/              # TypeScript 类型定义
├── utils/              # 工具函数
└── App.tsx             # 主应用组件
```

### 后端结构
```
backend/src/
├── models/             # 数据模型
├── services/           # 业务逻辑服务
├── routes/             # API 路由
├── auth/               # 认证相关
├── agents/             # AI 代理
└── database.py         # 数据库配置
```

## 开发指南

### 添加新功能
1. 先设计数据库模型（如需要）
2. 创建后端 API 端点
3. 实现前端组件和服务
4. 添加适当的错误处理
5. 编写测试用例

### 数据库迁移
- 使用 SQLAlchemy 的 Alembic 进行数据库迁移
- 修改模型后需要更新数据库架构
- 重要变更需要备份数据库

### API 设计
- 使用 RESTful API 设计原则
- 统一的响应格式
- 适当的 HTTP 状态码
- 详细的错误信息

### 错误处理
- 前端使用 try-catch 处理异步错误
- 后端使用 HTTPException 抛出错误
- 记录详细的错误日志
- 向用户显示友好的错误信息

## 安全规范
- 所有 API 端点需要认证（除了登录和注册）
- 使用 JWT Token 进行身份验证
- 密码使用 SHA256 哈希存储
- 输入数据使用 Pydantic 验证
- 防止 SQL 注入和 XSS 攻击

## 性能优化
- 数据库查询使用适当的索引
- 前端组件使用 React.memo 优化渲染
- 图片和静态资源使用 CDN
- API 响应使用分页
- 缓存频繁访问的数据

## 测试规范
- 单元测试覆盖核心业务逻辑
- 集成测试覆盖 API 端点
- 前端组件测试使用 React Testing Library
- 数据库测试使用测试数据库

## 部署规范
- 使用 Docker 容器化部署
- 环境变量管理敏感配置
- 生产环境使用 HTTPS
- 定期备份数据库
- 监控应用性能和错误

## 常见问题与解决方案

### 端口配置问题
- **后端服务端口**: 默认使用 3000 端口，确保与前端 API 调用一致
- **前端服务端口**: 默认使用 3001 端口，避免与后端冲突
- **数据库端口**: PostgreSQL 使用 5432 端口
- **端口冲突处理**: 
  - 如果端口被占用，Vite 会自动尝试下一个可用端口
  - 检查 `ps aux | grep -E "(node|python)"` 确认端口占用情况
  - 使用 `pkill -f "python.*app.py"` 停止后端服务
  - 使用 `pkill -f "vite"` 停止前端服务

### 服务启动问题
- **后端启动**: 使用 `python3 -m src.app` 而不是 `python -m src.app`
- **前端启动**: 使用 `npm run dev -- --port 3001` 指定端口
- **服务检查**: 
  - 后端: `curl http://localhost:3000/`
  - 前端: `curl http://localhost:3001/`
  - 数据库: `docker exec ai-todo-postgres psql -U ai_todo_user -d ai_todo_db -c "\dt"`

### 数据库连接问题
- **容器名称**: 使用 `ai-todo-postgres` 而不是 `ai-todo-db`
- **连接字符串**: 确保环境变量正确配置
- **表创建**: 新模型需要在 `database.py` 的 `init_database()` 中导入
- **依赖注入**: 使用 `get_db()` 而不是 `get_db_session()` 作为 FastAPI 依赖

### API 认证问题
- **登录格式**: 使用 `application/x-www-form-urlencoded` 而不是 JSON
- **默认密码**: 管理员默认密码是 `password` 而不是 `admin`
- **Token 格式**: 使用 `Bearer <token>` 格式
- **用户检查**: 使用 `docker exec ai-todo-postgres psql -U ai_todo_user -d ai_todo_db -c "SELECT username, password_hash FROM users;"`

### 前端 API 调用问题
- **API 基础 URL**: 确保 `scheduleApi.ts` 中的 `baseUrl` 指向正确的后端端口
- **CORS 配置**: 后端已配置允许所有来源，但生产环境需要限制
- **错误处理**: 使用 try-catch 包装所有 API 调用
- **加载状态**: 使用 loading 状态管理异步操作

### 开发环境调试
- **日志查看**: 使用 `docker logs ai-todo-postgres` 查看数据库日志
- **进程管理**: 使用 `ps aux | grep -E "(node|python)"` 查看运行进程
- **端口检查**: 使用 `netstat -tlnp | grep :3000` 检查端口占用
- **环境变量**: 检查 `.env` 文件是否正确加载

## 代码审查
- 所有代码变更需要代码审查
- 检查代码质量和安全性
- 确保测试覆盖率
- 验证功能完整性

## 文档维护
- 保持 README 文件更新
- API 文档使用 FastAPI 自动生成
- 代码注释保持最新
- 变更日志记录重要更新
